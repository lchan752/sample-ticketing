"""
Django settings for ticketing project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import environ
import datetime
import re


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_NAME = os.path.basename(BASE_DIR)


defaults = {
    # SECURITY WARNING: keep the secret key used in production secret!
    'SECRET_KEY': (str, 'x#0%p90f03!qw12noq^ms@@+deez%je3ntp$e@&q0(!20=um)i'),
    'DEBUG': (bool, True),

    # where to store static and media files.
    'STATIC_ROOT': (str, os.path.join('/tmp', PROJECT_NAME, 'static')),
    'MEDIA_ROOT': (str, os.path.join('/tmp', PROJECT_NAME, 'media')),

    # angular frontend URL, used to set CORS_ORIGIN_WHITELIST
    'FRONTEND_INGRESS': (str, 'localhost:4200'),

    # DB credentials
    'DB_SCHEMA': (str, ''),
    'DB_USER': (str, ''),
    'DB_PWD': (str, ''),
    'DB_HOST': (str, ''),
    'DB_PORT': (str, ''),

    # Redis credentials
    'REDIS_HOST': (str, ''),
    'REDIS_PORT': (str, ''),
    'REDIS_PWD': (str, ''),

    # useful when deploying locally on minikube because the ingress port is random
    'DISABLE_CORS': (bool, False),
}

env = environ.Env(**defaults)

if os.path.exists('.env'):
    # when doing local development, override environment by putting a .env file in your workspace
    env.read_env('.env')
elif os.path.exists('/config/env'):
    # when doing deployments, kubernetes will mount the env file to the container at /config/env
    env.read_env('/config/env')

ENV = env
SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG')
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'rest_framework',
    'corsheaders',
    'users',
    'tickets',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ticketing.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ticketing.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

if not all([env('DB_SCHEMA'), env('DB_USER'), env('DB_PWD'), env('DB_HOST'), env('DB_PORT')]):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DB_SCHEMA').strip(),
            'USER': env('DB_USER').strip(),
            'PASSWORD': env('DB_PWD').strip(),
            'HOST': env('DB_HOST').strip(),
            'PORT': env('DB_PORT').strip(),
        },
    }


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = env('STATIC_ROOT')
MEDIA_URL = '/media/'
MEDIA_ROOT = env('MEDIA_ROOT')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s %(module)s %(process)d %(thread)d %(message)s'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    }
}

AUTH_USER_MODEL = 'users.User'


def get_redis_url(database_number=0):
    if not env('REDIS_HOST') and not env('REDIS_PORT'):
        return None
    if env('REDIS_PWD'):
        REDIS_BASE_URL = 'redis://:{}@{}:{}/'.format(env('REDIS_PWD'), env('REDIS_HOST'), env('REDIS_PORT'))
    else:
        REDIS_BASE_URL = 'redis://{}:{}/'.format(env('REDIS_HOST'), env('REDIS_PORT'))
    return "{}/{}".format(REDIS_BASE_URL, database_number)


CHANNEL_REDIS_URL = get_redis_url(database_number=0)
CHANNEL_LAYERS_BACKEND = "asgi_redis.RedisChannelLayer" if CHANNEL_REDIS_URL else "asgiref.inmemory.ChannelLayer"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": CHANNEL_LAYERS_BACKEND,
        "ROUTING": "ticketing.routing.channel_routing",
    },
}

if CHANNEL_REDIS_URL:
    CHANNEL_LAYERS["default"]["CONFIG"] = {
        "hosts": [CHANNEL_REDIS_URL],
    }

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.helpers.jwt_response_payload_handler',
    'JWT_EXPIRATION_DELTA': datetime.timedelta(minutes=30)
}

if env('DISABLE_CORS'):
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = [
        env('FRONTEND_INGRESS'),
    ]


